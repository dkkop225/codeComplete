소프트웨어 품질

 

 

20.1 소프트웨어 품질의 특성

소프트웨어는 외적인 품질 특성 내적인 품질 특성을 모두 갖고 있다.

외적인 특성

정확성 (Correctness) - 시스템의 사양과 설계, 구현에 오류가 없는정도

사용성 (Usability) - 사용자가 시스템을 배우고 사용하는 데 있어서의 용이함

효율성(Effeciency) - 메모리와 실행 시간 같은 시스템 리소스의 최소 사용

신뢰성(Reliability) - 정해진  상황에서 언제든 필요한 기능을 수행할 수 있는 시스템 능력

무결성(Integrity)  - 시스템이 프로그램이나 데이터에 허용하지 않거나 잘못된 접근을 막는 정도

적응성(Adaptability) -  시스템을 변경하지 않고 설계된 환경 뿐 아니라 다른 응용프로그램에서 사용될 수 있는 정도

정밀성(Accuacy) -  시스템이 용도에 맞게 얼마나 잘 수행되는지 판단

견고성(Robustness) - 시스템이 잘못된 입력이나 악조건에서도 기능을 계속해서 수행할 수 있는 정도

내적인 특성

유지보수성(Maintainability) - 시스템의 기능을 추가하거나 변경할 때의 편의성

유연성(Flexibility) - 시스템이 설계된 환경이 아닌 다른 목적이나 환경으로 변경할 수 있는정도

이식성(Portability) - 시스템 설계된 환경이 아닌 다른 환경에서 작동할 수 있도록 시스템을 변경할 때의 편의성

재사용성(reusability) - 시스템의 일부를 다른 시스템에서 사용할 수 있는 정도나 편의성동

가독성(readability) - 시스템의 소스코드를 상세한 명령문 수준에서 읽고 이해할 때의 편의성

테스트 용이성(testability) - 시스템을 단위 테스트나 시스템 테스트 할 수 있는정도

이해 용이성(Understandability) - 시스템 구성과 코드 수준에서 시스템을 이해할 때의  편의성

각 특성은 서로 상호작용하므로 이를 이해하고 적용해야함

 

    20.2 소프트웨어 품질을 향상시키기 위한 기법

제품 자체 뿐 아니라 프로세스에도 초점을 맞춰야 한다

 

소프트웨어 품질의 목표 - 명확한 목표 없으면 다른 특성을 위한 작업이 될수도 있다.

명확한 품질 보증 활동

테스트 전략 - 테스트 수행이 제품의 신뢰성에 대한 상세한 평가 제공 가능

소프트웨어 공학 가이드 라인

비형식적인 기술적 검토 - 형식적 검토 전 스스로 혹은 동료들과 코드를 살펴본다

절차를 따르는 기술적 거모

외부감사

개발 프로세스

변경 관리 과정

요구사항의 변경은 혼돈이 생길 수 있으므로 변경을 효과적으로 관리해야 함

결과 측정

프로토타이핑

시스템 핵심 기능에 대한 실질적인 모델 개발

목표설정

품질 목표를 명확히 설정하는 것이 목표 달성에 도움이 된다

 

    20.3 품질 향상 기법의 상대적 효과성

발견된 결함의 비율

그당시 존재하는 전체 결함의 수를 기준으로 발견한 결함의 비율 결정

 개발자가 더 높은 비율로 결함을 발견하기 위해선 여러 기법을 조합해야 한다

단독보다 여러개 사용이 더 좋은 결과가 나온다

결함 발견 비용

정밀 검토가 테스트에 비해 비용 저렴

결함 수정 비용

 

    20.4 품질 보증 활동 시기

오류가 더 일찍 삽입될수록 더 많고 큰 문제 야기, 오류 제거비용 증가

초기 단계 뿐 아니라 전반적인 품질보증작업 강조

 

20.5 소프트웨어 품질의 일반적인 원칙

소프트웨어 품질의 향상으로 개발비용 감소 가능 

 