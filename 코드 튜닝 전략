코드 튜닝 전략

성능이란?

코드 튜닝은 프로그램의 성능을 향상시키는 한가지 방법



품질의 특성과 성능

소프트웨어를 제시간에 전달하고 깔끔한 사용자 인터페이스를 제공하고 고장 시간을 피하는 것이 매우 중요하다.

성능과 코드 속도는 어느정도만 관련이 있다.

속도를 빠르게 만드려고 다른 특성을 희생하는 것을 주의해야 한다.

속도에 대한 작업이 전체적인 성능에 도움을 주기보다 해를 입힐 수도 있다.

성능과 코드 튜닝

프로그램 요구사항

성능은 실제보다 훨씬 더 자주 요구사항으로 여겨진다.

성능 문제를 해결하는 데 시간을 투자하기 전에 먼저 해결해야 할 문제를 해결하고 있는지 확인해야 한다.



프로그램 설계

어떤 프로그램 설계는 성능 좋은 시스템을 만들기 어렵게 하고, 어떤 설계는 좋은 시스템을 만들 수밖에 없게 한다.

프로그램의 크기와 속도가 중요하단 것을 알고 있다면 크기와 속도의 목표를 합리적으로 달성할 수 있게 아키텍쳐를 설계한다.

성능 중심적인 아키텍처를 설계한 다음 개별적인 서브 시스템과 기능, 클래스에 대한 리소스 목표를 설정한다.

개별적인 리소스의 목표를 설정하면 시스템의 궁극적인 성능을 예측할수 있다.

목표를 분명하게 만드는 단순한 행위는 목표가 성취될 가능성을 높인다.

효율화를 직접 달성하는 것이 아니라 장기적으로 효율화를 촉진하는 목표를 설정해도 된다.



클래스와 루틴 설계

클래스와 루틴의 내부 설계는 성능에 도움이 되게 설계할 수 있는 또 다른 기회를 제공한다.

운영체제 상호작용

프로그램이 외부 파일이나 동적 메모리, 출력장치를 다루면 운영체제와의 상호작용 또한 고려해야 한다.



코드 컴파일

좋은 컴파일러는 고급 프로그래밍 언어코드를 최적화 된 기계어 코드로 변환하므로 올바른 컴파일러를 선택하여야 한다.



하드웨어

소수의 고객을 위한 주문형 소프트웨어 개발 시엔 하드웨어 업그레이드가 가장 저렴한 대안이 될 수 있다.



  코드 튜닝

"튜닝"은 단일 클래스나 단일 루틴 등 몇줄의 코드에 영향을 미치는 작은 규모의 변경을 가르킨다.

성능을 향상시키는 고수준의 방법이나 큰 규모의 설계상 변경이 아니다.

코드 튜닝을 통해 시스템 설계부터 각 단계에서 매우 극적으로 코드를 개선할 수 있다.



    코드 튜닝 소개

고급 언어에서 코드를 줄인다고 기계어 코드의 속도나 크기를 향상시키지 않는다.

프로그램을 이식 가능하게 만들고 싶을 때 어떤 환경에서 성능을 향상시켰던 기법이 다른 환경에서 성능을 저하할 수  있다.

코드를 튜닝할 때 암시적으로 컴파일러 버전, 라이브러리 버전 등을 변경 할 때 마다 최적화를 측정해야 한다

코드를 작성하면서 최적화 해야 할 필요는 없다.

프로그램이 완벽히 작동하기 전까지 성능 병목 규명이 어렵다

개발자들이 병목을 정확하게 파악한 경우에도 지나치게 병목을 없애서 다른 부분을 위태롭게 할 수도 있다.

개발 초기에 최적화에 초점을 맞추면 다른 목표 달성이 어렵다.

프로그램 완성 전에 최적화를 해야 한다면 프로세스에 대해 전망함으로써 위험을 최소화 한다.

빠른 프로그램 이전에 정확한 프로그램이 중요하다

튜닝시점

고급 설계를 이용할 것

나중에 작업이 쉽도록 모듈화 및 변경이 쉽도록 만들 것

제대로 완성되었을 때 성능을 검사할 것

최적화가 필요하단 것을 알게 될 때까지 최적화 할 것



컴파일러 최적화

컴파일러마다 장단점이 있으므로 적합한 컴파일러를 찾아라

최적화를 잘하는 컴파일러 이용시 최대 40프로 이상의 코드속도 향상 기대



느리고 비대한 부분

비효율성의 공통적인 원인

입력 / 출력 연산

불필요한 입,출력은 비효율성을 야기하며 공간이 중요하지 않을 시 인메모리 데이터 구조를 사용한다

운영체제 메모리 페이지 교체 연산은 많은 시간을 요구한다

시스템 호출

시스템 루틴 또한 많은 것을 요구한다

대안 

자신만의 서비스 작성

시스템 호출을 피한다.

시스템 루틴 호출을 더 빠르게 만들기 위해 벤더와 작업

인터프리트 언어

오류

공통적인 연산의 상대적인 성능비용



4. 측정

코드를 측정해 과열지점을 찾아 최적화 후 얼마나 향상되었는지 평가

측정은 정확하게 코드의 실행 시간만 cpu 클럭 단위로 측정

        

반복

최적화를 반복하면 누적되어 더욱 큰 효과를 발휘할 수 있다.

코드 튜닝 단계

1)이해하고 변경이 쉬운 코드를 사용하여 프로그램 개발

2)if 성능이 안좋으면

a. 마지막으로 좋았던 버전으로 돌아갈 수 있는 코드 저장

b. 과열지점 찾기 위해 시스템 측정

c. 성능 부적절 사유 파악 -- 코드 튜닝이 적절치 않으면 다시 처음으로 돌아감

d. c에서 규명된 병목 튜닝

e.한번에 하나씩 성능 측정

f. 성능이 향상되지 않았다면 a 단계에서 저장하려 했던 코드로 되돌아 간다.

2단계를 반복

